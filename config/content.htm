<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-yan21ed/">https://mdecd2025.github.io/hw-yan21ed/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-yan21ed">https://github.com/mdecd2025/hw-yan21ed</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>task5</h1>
<p>1.請用繁體中文詳細說明下列資料:<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></p>
<p>Webots 是一款專業的開源移動機器人仿真軟件，由 Cyberbotics 公司開發。它提供了一個快速原型設計環境，讓使用者可以在虛擬的 3D 空間中創建具有物理特性的機器人及其環境。Webots 最初由瑞士洛桑聯邦理工學院（EPFL）開發，後於 2018 年 12 月起以 Apache 2.0 許可證開源，廣泛應用於教育、研究和工業領域。它的核心基於開源物理引擎 ODE（Open Dynamics Engine）和 OpenGL 技術，支持 Windows、Linux 和 macOS 操作系統，並兼容多種編程語言，包括 C、C++、Python、Java 和 MATLAB。</p>
<p>簡單來說，Webots 是一個強大的工具，用於模擬機器人的行為、測試控制算法，並在虛擬環境中驗證設計，而無需直接使用實體機器人。</p>
<p><strong>我可以用</strong><strong> Webots </strong><strong>做什麼？</strong></p>
<p>Webots 的功能非常豐富，以下是一些主要用途：</p>
<ol>
<li><strong>機器人設計與建模</strong>：
<ul>
<li>使用內建的 3D 編輯器創建機器人模型，或導入外部 CAD 文件（如 Blender 或 URDF 格式）。</li>
<li>設定機器人的物理屬性，例如質量、摩擦力、關節等。</li>
</ul>
</li>
<li><strong>仿真與測試</strong>：
<ul>
<li>模擬機器人在不同環境中的行為，如輪式機器人、腿式機器人或飛行機器人。</li>
<li>測試各種傳感器（如距離傳感器、攝影機、陀螺儀）和執行器（如馬達、驅動輪）的運作。</li>
</ul>
</li>
<li><strong>控制算法開發</strong>：
<ul>
<li>編寫控制器程式，讓機器人執行特定任務，例如避障、巡線或協作。</li>
<li>支持多種編程語言，適合不同技術背景的使用者。</li>
</ul>
</li>
<li><strong>教育與研究</strong>：
<ul>
<li>用於機器人學課程，教授運動學、動力學和人工智能等概念。</li>
<li>研究多智能體系統（如群體智慧）或自適應行為（如神經網絡、遺傳算法）。</li>
</ul>
</li>
<li><strong>真實機器人接口</strong>：
<ul>
<li>將模擬結果轉移到真實機器人（如 e-puck、Nao、DARwIn-OP），實現虛實結合。</li>
</ul>
</li>
<li><strong>比賽與原型開發</strong>：
<ul>
<li>參與機器人競賽（如 Robotstadium）或快速開發機器人原型，應用於汽車、航空航天或消費品行業。</li>
</ul>
</li>
</ol>
<p>總之，Webots 適合用來模擬、驗證和優化機器人系統，無論是單一機器人還是多機器人協作場景。</p>
<p><strong>使用</strong><strong> Webots </strong><strong>需要知道什麼？</strong></p>
<p>要有效使用 Webots，您需要掌握以下知識和技能：</p>
<ol>
<li><strong>基本電腦操作</strong>：
<ul>
<li>熟悉 Windows、Linux 或 macOS 操作系統的基本使用。</li>
<li>確保您的電腦符合最低硬體要求：雙核 CPU（建議四核）、2GB RAM（建議更多）、支援 OpenGL 3.3 的顯卡（推薦 NVIDIA 或 AMD）。</li>
</ul>
</li>
<li><strong>編程基礎</strong>：
<ul>
<li>熟悉至少一種 Webots 支持的語言：C、C++、Python、Java 或 MATLAB。</li>
<li>理解基本的程式設計概念，如變數、迴圈、條件語句等。</li>
</ul>
</li>
<li><strong>機器人學概念</strong>：
<ul>
<li>了解機器人的基本組成，例如傳感器、執行器和控制器。</li>
<li>對物理模擬（如質量、摩擦力、碰撞檢測）有初步認識。</li>
</ul>
</li>
<li><strong>Webots </strong><strong>介面與功能</strong>：
<ul>
<li>學習 Webots 的圖形介面，包括場景樹（Scene Tree）、3D 視圖和文字編輯器。</li>
<li>熟悉如何創建「世界」（World）、添加物件和機器人，以及編寫控制器。</li>
</ul>
</li>
<li><strong>官方資源</strong>：
<ul>
<li>閱讀 Webots 的《用戶指南》（User Guide）和《參考手冊》（Reference Manual），這兩個文件提供了詳細的操作說明和 API 介紹。</li>
<li>使用內建的教學範例（Tutorials）逐步學習。</li>
</ul>
</li>
</ol>
<p>初學者可以從簡單的任務開始，例如讓一個輪式機器人移動，然後逐步進階到更複雜的應用。</p>
<p><strong>如何獲得</strong><strong> Webots </strong><strong>的用戶支持？</strong></p>
<p>Webots 提供了多種用戶支持管道：</p>
<ol>
<li><strong>官方文件</strong>：
<ul>
<li>《用戶指南》和《參考手冊》可在 Webots 官網（<a href="https://cyberbotics.xn--com),-pn2hzxxpp7kma359dskcfx3f6bfr7dx74f65kl00ie27a/">https://cyberbotics.com<span>）或軟件內獲取，提供全面的操作和</span></a>API 說明。</li>
</ul>
</li>
<li><strong>社區支持</strong>：
<ul>
<li><strong>GitHub </strong><strong>討論區</strong>：Webots 的開源代碼托管於 GitHub（<a href="https://github.com/cyberbotics/webots%EF%BC%89%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E5%9C%A8%E3%80%8CDiscussions%E3%80%8D%E5%8D%80%E5%9F%9F%E6%8F%90%E5%95%8F%E6%88%96%E6%90%9C%E7%B4%A2%E8%A7%A3%E7%AD%94%E3%80%82">https://github.com/cyberbotics/webots<span>），您可以在「</span>Discussions<span>」區域提問或搜索解答。</span></a></li>
<li><strong>論壇與社群</strong>：加入 Webots 的 Discord 伺服器或相關機器人學社群，與其他使用者交流。</li>
</ul>
</li>
<li><strong>技術支持</strong>：
<ul>
<li>如果您是付費用戶（Webots 有商業版本），可以通過 Cyberbotics 的官方郵箱（<a href="mailto:support@cyberbotics.com">support@cyberbotics.com</a>）獲得專業支持。</li>
<li>開源版本主要依賴社區自助，但問題通常也能在 GitHub 上得到回應。</li>
</ul>
</li>
<li><strong>教學資源</strong>：
<ul>
<li>Webots 內建「導覽之旅」（Guided Tour），展示範例世界和功能。</li>
<li>B 站或 YouTube 上有許多中文和英文教學影片，例如「Webots 超詳細入門教程」。</li>
</ul>
</li>
</ol>
<p>建議先查閱官方文件和範例，若無法解決問題，再向社區或官方求助。</p>
<p><strong>Webots </strong><strong>仿真中的「世界」（</strong><strong>World</strong><strong>）是什麼？</strong></p>
<p>在 Webots 中，「世界」（World）是指機器人及其環境的 3D 虛擬描述。它是一個完整的仿真場景，包含以下元素：</p>
<ul>
<li><strong>物件描述</strong>：每個物件的位置、方向、幾何形狀、外觀（如顏色、紋理）和物理屬性（如質量、摩擦係數）。</li>
<li><strong>層次結構</strong>：世界以樹狀結構組織（基於 VRML97 格式），物件可包含子物件，例如一個機器人可能包含輪子、傳感器和關節。</li>
<li><strong>文件格式</strong>：世界儲存在 .wbt 文件中，通常位於 Webots 項目的 worlds 子目錄。</li>
</ul>
<p>世界文件不包含機器人的控制器程式，只指定每個機器人使用的控制器名稱。它定義了仿真的環境和初始條件，例如地面、地形、光線和障礙物。</p>
<p><strong>Webots </strong><strong>中的「控制器」（</strong><strong>Controller</strong><strong>）是什麼？</strong></p>
<p>「控制器」（Controller）是控制 Webots 中機器人行為的程式。它負責：</p>
<ul>
<li><strong>讀取傳感器數據</strong>：如距離傳感器或攝影機的輸入。</li>
<li><strong>執行邏輯運算</strong>：根據數據計算機器人的動作。</li>
<li><strong>發送指令</strong>：控制執行器，例如讓馬達轉動或輪子移動。</li>
</ul>
<p><strong>特性</strong>：</p>
<ul>
<li><strong>編程語言</strong>：可用 C、C++、Java、Python 或 MATLAB 編寫。</li>
<li><strong>獨立進程</strong>：每個控制器作為 Webots 的子進程運行，不與主程式共享記憶體，可在不同 CPU 核心上執行。</li>
<li><strong>儲存位置</strong>：控制器源文件和編譯後的文件位於項目的 controllers 子目錄。</li>
</ul>
<p>例如，一個簡單的控制器可能讓機器人檢測障礙物並轉向避開。同一控制器程式可被多個機器人共用，但每個機器人會啟動獨立的進程。</p>
<p><strong>Webots </strong><strong>中的「監督控制器」（</strong><strong>Supervisor Controller</strong><strong>）是什麼？</strong></p>
<p>「監督控制器」（Supervisor Controller）是一種特殊類型的控制器，具有更高的權限，用於管理和控制整個仿真環境。它的特點包括：</p>
<ul>
<li><strong>特權操作</strong>：普通控制器只能控制機器人本身，而監督控制器可以執行以下操作：</li>
<ul>
<li>移動機器人到指定位置。</li>
<li>更改仿真環境（如添加或移除物件）。</li>
<li>控制仿真流程（如暫停、重啟或錄製影片）。</li>
</ul>
<li><strong>啟用方式</strong>：在場景樹中，將機器人的 supervisor 欄位設為 TRUE，該機器人即可使用監督控制器。</li>
<li><strong>編程語言</strong>：與普通控制器相同，支持 C、C++、Python 等。</li>
</ul>
<p><strong>應用場景</strong>：</p>
<ul>
<li>在多機器人仿真中，監督控制器可用來協調各機器人的行為。</li>
<li>用於測試或調試，例如隨機放置障礙物或記錄機器人軌跡。</li>
</ul>
<p>例如，一個監督控制器可能監控所有機器人的位置，並在某個機器人偏離路徑時將其重置。</p>
<p>2.請整理<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a><span> </span>中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</p>
<p>3.請摘要出下列內容: (放入英文文章內容)</p>
<p><strong>Summary of Webots User Guide R2025a</strong></p>
<p><strong>Introduction to Webots</strong><br/> Webots is a professional mobile robot simulation software designed for rapid prototyping. It allows users to create 3D virtual worlds with physics properties and add mobile robots equipped with sensors and actuators. Users can program these robots individually and even transfer control programs to real-world robots like e-puck, DARwIn-OP, and Nao.</p>
<p><strong>Capabilities of Webots</strong><br/> Webots is widely used in research and education, supporting:</p>
<ul>
<li>Mobile robot prototyping (academia, industry, hobbyists)</li>
<li>Robot locomotion research (legged, humanoid, quadruped robots)</li>
<li>Multi-agent systems (swarm intelligence, collaborative robots)</li>
<li>AI and adaptive behavior research (genetic algorithms, neural networks)</li>
<li>Robotics education (C/C++/Java/Python/MATLAB programming)</li>
<li>Robot competitions</li>
</ul>
<p><strong>Required Knowledge</strong><br/> Users should have basic knowledge of C, C++, Java, Python, or MATLAB to program robot controllers. For creating custom robot models or environments, knowledge of 3D computer graphics and VRML97 is helpful.</p>
<p><strong>User Support</strong><br/> Cyberbotics offers paid support services, while community support is available via:</p>
<ul>
<li>Robotics StackExchange (technical questions)</li>
<li>GitHub Discussions (Webots development)</li>
<li>GitHub Issues (bug reports)</li>
<li>Discord (quick discussions)</li>
</ul>
<p><strong>Webots Simulation Components</strong></p>
<ol>
<li><strong>World (.wbt file)</strong>– Defines robots and their environment, stored in the "worlds" directory.</li>
<li><strong>Controller Program</strong>– Controls robots, written in C/C++/Java/Python/MATLAB, stored in the "controllers" directory.</li>
<li><strong>Optional Physics Plugin</strong>– Modifies physics behavior using C/C++.</li>
</ol>
<p><strong>Key Concepts</strong></p>
<ul>
<li><strong>World</strong> – A hierarchical 3D structure describing objects, their properties, and relationships.</li>
<li><strong>Controller</strong> – A program that controls robots, executed as separate processes per robot.</li>
<li><strong>Supervisor Controller</strong> – A special controller with privileged operations like simulation control and video capture.</li>
</ul>
<p>4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</p>
<ul>
<li><strong>Webots</strong> - 一款專業的移動機器人模擬軟體</li>
</ul>
<ul>
<li><em>Example:</em> "Webots is a professional mobile robot simulation software package."</li>
</ul>
<ul>
<li><strong>simulation</strong> - 模擬，指在虛擬環境中再現現實世界的物理特性</li>
</ul>
<ul>
<li><em>Example:</em> "A Webots simulation is composed of following items:"</li>
</ul>
<ul>
<li><strong>prototyping</strong> - 原型製作，通常用於研究或開發階段</li>
</ul>
<ul>
<li><em>Example:</em> "Webots is well suited for research and educational projects related to mobile robotics."</li>
</ul>
<ul>
<li><strong>virtual</strong> - 虛擬的，非實體的</li>
</ul>
<ul>
<li><em>Example:</em> "The user can create 3D virtual worlds with physics properties."</li>
</ul>
<ul>
<li><strong>physics properties</strong> - 物理屬性，如質量、摩擦力等</li>
</ul>
<ul>
<li><em>Example:</em> "3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc."</li>
</ul>
<ul>
<li><strong>mobile robots</strong> - 移動機器人，可以行走、移動或飛行的機器人</li>
</ul>
<ul>
<li><em>Example:</em> "The user can add simple passive objects or active objects called mobile robots."</li>
</ul>
<ul>
<li><strong>locomotion</strong> - 運動方式，例如輪式、腿式或飛行方式</li>
</ul>
<ul>
<li><em>Example:</em> "These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots)."</li>
</ul>
<ul>
<li><strong>sensor</strong> - 感測器，例如距離感測器、相機、觸碰感測器等</li>
</ul>
<ul>
<li><em>Example:</em> "They may be equipped with a number of sensor and actuator devices."</li>
</ul>
<ul>
<li><strong>actuator</strong> - 執行器，例如馬達、驅動輪等，能讓機器人執行動作</li>
</ul>
<ul>
<li><em>Example:</em> "They may be equipped with a number of sensor and actuator devices."</li>
</ul>
<ul>
<li><strong>controller</strong> - 控制器，負責控制機器人行為的程式</li>
</ul>
<ul>
<li><em>Example:</em> "A controller is a computer program that controls a robot specified in a world file."</li>
</ul>
<ul>
<li><strong>Supervisor Controller</strong> - 主管控制器，擁有更高級的控制權限</li>
</ul>
<ul>
<li><em>Example:</em> "The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE."</li>
</ul>
<ul>
<li><strong>interface</strong> - 介面，指軟體或硬體之間的互動方式</li>
</ul>
<ul>
<li><em>Example:</em> "Webots also contains a number of interfaces to real mobile robots."</li>
</ul>
<ul>
<li><strong>world</strong> - 世界，在<span>Webots</span>中指包含機器人及環境的<span>3D</span>場景</li>
</ul>
<ul>
<li><em>Example:</em> "A world, in Webots, is a 3D description of the properties of robots and of their environment."</li>
</ul>
<ul>
<li><strong>hierarchical structure</strong> - 階層結構，表示物件之間的組成關係</li>
</ul>
<ul>
<li><em>Example:</em> "Worlds are organized as hierarchical structures where objects can contain other objects."</li>
</ul>
<ul>
<li><strong>VRML97</strong> - 一種<span>3D</span>描述語言，<span>Webots</span>使用它來描述場景</li>
</ul>
<ul>
<li><em>Example:</em> "If you don't want to use existing robot models...you will need a basic knowledge of 3D computer graphics and VRML97 description language."</li>
</ul>
<ul>
<li><strong>plugin</strong> - 外掛程式，可以擴充<span>Webots</span>的功能</li>
</ul>
<ul>
<li><em>Example:</em> "An optional physics plugin that can be used to modify Webots regular physics behavior."</li>
</ul>
<ul>
<li><strong>robot locomotion</strong> - 機器人運動方式，例如四足機器人、仿人機器人等</li>
</ul>
<ul>
<li><em>Example:</em> "Robot locomotion research (legged, humanoids, quadrupeds robots, etc.)."</li>
</ul>
<ul>
<li><strong>multi-agent</strong> - 多智能體，指多個機器人協同工作</li>
</ul>
<ul>
<li><em>Example:</em> "Multi-agent research (swarm intelligence, collaborative mobile robots groups, etc.)."</li>
</ul>
<ul>
<li><strong>adaptive behavior</strong> - 適應性行為，通常涉及<span>AI</span>或機器學習</li>
</ul>
<ul>
<li><em>Example:</em> "Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)."</li>
</ul>
<ul>
<li><strong>genetic algorithm</strong> - 遺傳演算法，一種基於自然選擇的演算法</li>
</ul>
<ul>
<li><em>Example:</em> "Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)."</li>
</ul>
<ul>
<li><strong>neural networks</strong> - 神經網路，一種機器學習模型</li>
</ul>
<ul>
<li><em>Example:</em> "Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)."</li>
</ul>
<ul>
<li><strong>C/C++/Java/Python/MATLAB</strong> - Webots 支援的程式語言</li>
</ul>
<ul>
<li><em>Example:</em> "A basic knowledge of the C, C++, Java, Python or MATLAB programming language is necessary to program your own robot controllers."</li>
</ul>
<ul>
<li><strong>GitHub Issues</strong> - GitHub 的問題回報系統，用來回報<span> Webots </span>錯誤</li>
</ul>
<ul>
<li><em>Example:</em> "GitHub Issues should be used only to report bugs found in Webots."</li>
</ul>
<ul>
<li><strong>Discord</strong> - 一種即時通訊平台，可用來討論<span> Webots</span></li>
</ul>
<ul>
<li><em>Example:</em> "Discord can be used for quick questions and spontaneous discussions with the Webots community."</li>
</ul>
<ul>
<li><strong>byte code</strong> - 位元組碼，<span>Java </span>需先編譯為<span> byte code </span>再由<span> JVM </span>執行</li>
</ul>
<ul>
<li><em>Example:</em> "Java controller need to be compiled to byte code ('.class' files or '.jar') and then interpreted by a Java Virtual Machine."</li>
</ul>
<p>5.請詳細說明如何採手動方式在 Webots 建立下列場景:</p>
<ol>
<li><strong></strong><strong>創建世界</strong>: 建立一個新的世界，儲存新世界。</li>
</ol>
<p><strong>2.</strong><strong>設置場景的環境</strong>: 設置地面及環境背景。</p>
<p><strong>3.</strong><strong>添加物體</strong><strong>:</strong> 添加靜、動態物體，調整旋轉物體位置。</p>
<ol start="4">
<li><strong> </strong><strong>配置機器人</strong><strong>: </strong>添加機器人，再進行機器人的屬性設置。</li>
<li><strong> </strong><strong>設定物理屬性</strong><strong>: </strong>點擊「Scene Tree」中的「Physics」選項，設定物體的重力、質量、摩擦係數、彈性等物理屬性。</li>
<li><strong> </strong><strong>設置路徑與物體交互</strong><strong>: </strong>手動設置機器人行駛的路徑；設定物體之間的交互規則。</li>
</ol>
<p><strong>7.</strong><strong>測試與調整</strong><strong>: </strong>點擊「Play」按鈕開始模擬運行，檢查場景中的物體和機器人的行為；根據需要調整物理屬性、機器人控制器、場景佈局等。</p>
<p>6.希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</p><h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<h1>w3</h1>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>